import { useState } from 'react';
import Hero from '@/components/Hero';

interface Item {
  type: '–ë—Ä—É—Å—á–∞—Ç–∫–∞' | '–ë–æ—Ä–¥—é—Ä' | '–ü–æ—Ä–µ–±—Ä–∏–∫';
  area: string;
}

export default function CalculatePage() {
  const [items, setItems] = useState<Item[]>([{ type: '–ë—Ä—É—Å—á–∞—Ç–∫–∞', area: '' }]);
  const [address, setAddress] = useState('');
  const [results, setResults] = useState<any[]>([]);
  const [totalSum, setTotalSum] = useState<number | null>(null);

  const prices = {
    '–ë—Ä—É—Å—á–∞—Ç–∫–∞': 2700,
    '–ë–æ—Ä–¥—é—Ä': 950,
    '–ü–æ—Ä–µ–±—Ä–∏–∫': 800,
  };

  const handleChange = (index: number, field: keyof Item, value: string) => {
    const updated = [...items];
    updated[index][field] = value;
    setItems(updated);
  };

  const handleAddItem = () => {
    setItems([...items, { type: '–ë—Ä—É—Å—á–∞—Ç–∫–∞', area: '' }]);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    let sum = 0;
    const details = items.map((item) => {
      const qty = parseFloat(item.area) || 0;
      const pallets = Math.ceil(qty / 10);
      const cost = qty * prices[item.type];
      sum += cost;
      return { ...item, qty, pallets, cost };
    });

    const totalPallets = details.reduce((acc, item) => acc + item.pallets, 0);
    const trips = Math.ceil(totalPallets / 10);

    let delivery = 10000;
    if (address.includes('–ê–ª—å-–§–∞—Ä–∞–±–∏') || address.includes('–ë–ê–ö–ê–î') || address.includes('–ê—à–∏–º–æ–≤–∞') || address.includes('–ë–ê–ö')) {
      delivery = 10000;
    } else if (address.includes('–≤–≤–µ—Ä—Ö')) {
      delivery += 10000;
    } else if (address.length > 5) {
      delivery += 20000;
    }

    const palletDeposit = totalPallets * 3000;
    setResults(details);
    setTotalSum(sum + delivery + palletDeposit);
  };

  return (
    <>
      <Hero
        title="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        subtitle="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        backgroundImage="/catalog-hero.jpg"
      />

      <div className="space-y-12 max-w-2xl mx-auto w-full px-4 sm:px-6 py-12">
        <form onSubmit={handleSubmit} className="space-y-6">
          {items.map((item, idx) => (
            <div key={idx} className="bg-white shadow rounded-lg p-4 space-y-4">
              <div className="space-y-1">
                <label className="block text-sm font-medium text-gray-700">–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏</label>
                <select
                  className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={item.type}
                  onChange={(e) => handleChange(idx, 'type', e.target.value)}
                >
                  <option value="–ë—Ä—É—Å—á–∞—Ç–∫–∞">–ë—Ä—É—Å—á–∞—Ç–∫–∞ (–º¬≤)</option>
                  <option value="–ë–æ—Ä–¥—é—Ä">–ë–æ—Ä–¥—é—Ä (–ø.–º.)</option>
                  <option value="–ü–æ—Ä–µ–±—Ä–∏–∫">–ü–æ—Ä–µ–±—Ä–∏–∫ (–ø.–º.)</option>
                </select>
              </div>
              <div className="space-y-1">
                <label className="block text-sm font-medium text-gray-700">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ({item.type === '–ë—Ä—É—Å—á–∞—Ç–∫–∞' ? '–º¬≤' : '–ø–æ–≥. –º'})
                </label>
                <input
                  type="number"
                  min="0"
                  value={item.area}
                  onChange={(e) => handleChange(idx, 'area', e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 40"
                  required
                />
              </div>
            </div>
          ))}

          <button
            type="button"
            onClick={handleAddItem}
            className="text-blue-600 hover:underline text-sm sm:text-base"
            aria-label="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –ø—Ä–æ–¥—É–∫—Ü–∏—é"
          >
            + –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–æ–∑–∏—Ü–∏—é
          </button>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <input
              type="text"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å"
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg w-full sm:w-auto"
          >
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
          </button>
        </form>

        <hr className="my-6 border-t border-gray-200" />

        {results.length > 0 && (
          <div className="space-y-6">
            {results.map((res, i) => (
              <div key={i} className="border rounded p-3 bg-white shadow-sm">
                <p className="font-medium">{res.type}</p>
                <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {res.qty} {res.type === '–ë—Ä—É—Å—á–∞—Ç–∫–∞' ? '–º¬≤' : '–ø.–º.'}</p>
                <p>–ü–∞–ª–ª–µ—Ç: {res.pallets}</p>
                <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: {res.cost.toLocaleString()} ‚Ç∏</p>
              </div>
            ))}
            <div className="bg-gray-50 rounded-lg p-4 text-gray-800 space-y-2">
              <p><strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {totalSum?.toLocaleString()} ‚Ç∏</p>
              <p><strong>–í–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É</strong> –∏ <strong>–∑–∞–ª–æ–≥ –∑–∞ –ø–∞–ª–ª–µ—Ç—ã</strong> (3000 ‚Ç∏/—à—Ç, –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –¥–Ω–µ–π)</p>
              <p className="text-sm text-gray-500 pt-2">üí° –†–∞—Å—á—ë—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º. –î–ª—è —Ç–æ—á–Ω–æ–π —Å–º–µ—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.</p>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
